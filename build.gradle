plugins {
    id "java"
    id 'java-test-fixtures'

    id 'idea'

    id 'org.springframework.boot' version '3.1.+'
    id 'io.spring.dependency-management' version '1.+'

    id "org.owasp.dependencycheck" version "latest.release"
    id "checkstyle"
    id "pmd"
}

group = 'org.grouphq'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

// Checks Dependencies for Known Vulnerabilities
dependencyCheck {
    suppressionFile = file("${project.rootDir}/config/dependency_check/suppressions.xml")
    failBuildOnCVSS = 8.0 // fails on mid-high to critical severity scores
    nvd {
        apiKey = project.findProperty('nvdApiKey') ?: 'NONE'
    }
}

// Java Code Style Checker Following (mostly) Google Style Guidelines
checkstyle {
    toolVersion = "latest.release"
    configFile = file("${project.rootDir}/config/checkstyle/google_checks.xml")
    configProperties = [ "suppressionFile" : project(':').file('config/checkstyle/suppressions.xml')]
}

// Java PMD for Enforcing Several Code Quality Measures
pmd {
    consoleOutput = true
    rulesMinimumPriority = 5
    ruleSetFiles = files(
            "${project.rootDir}/config/pmd/bestpractices.xml",
            "${project.rootDir}/config/pmd/codestyle.xml",
            "${project.rootDir}/config/pmd/design.xml",
            "${project.rootDir}/config/pmd/documentation.xml",
            "${project.rootDir}/config/pmd/errorprone.xml",
            "${project.rootDir}/config/pmd/multithreading.xml",
            "${project.rootDir}/config/pmd/performance.xml",
            "${project.rootDir}/config/pmd/security.xml")
    toolVersion = "6.+"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    checkstyle.resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
        select("com.google.guava:guava:0")
    }
}

repositories {
    mavenCentral()
}

bootBuildImage {
    imageName = "${project.name}"
    environment = ["BP_JVM_VERSION" : "17.*"]
}

sourceSets {
    testAcceptance {
        java {
            srcDir 'src/testAcceptance/java'
        }
        resources {
            srcDir 'src/testAcceptance/resources'
        }
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

idea {
    module {
        testSources.from(sourceSets.testAcceptance.java.srcDirs)
        testSources.from(sourceSets.testAcceptance.resources.srcDirs)
    }
}

ext {
    set('springCloudVersion', "2022.0.4")
    set('otelVersion', "1.26.0")
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
    implementation 'org.springframework.boot:spring-boot-starter-rsocket'
    implementation 'org.springframework.security:spring-security-rsocket'
    implementation 'net.java.dev.jna:jna:5.13.0'

    implementation "org.springframework.cloud:spring-cloud-starter-config"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.boot:spring-boot-starter-aop"

    implementation 'io.projectreactor:reactor-tools'
    implementation 'com.github.javafaker:javafaker:1.0.2'
//    implementation "io.sentry:sentry-spring-boot-starter-jakarta:6.28.0"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Micrometer tracing integration with OpenTelemetry
    implementation platform("io.micrometer:micrometer-tracing-bom:latest.release")
    implementation "io.micrometer:micrometer-tracing-bridge-otel"
    runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"

    // Prometheus integration with Micrometer metrics
    implementation "io.micrometer:micrometer-registry-prometheus"

    // Reactor integration with Micrometer (also pulls in the context-propagation dependency)
    implementation "io.projectreactor:reactor-core-micrometer:1.0.10"

    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.squareup.okhttp3:mockwebserver'
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'


    // Test Fixtures Dependencies
    testFixturesImplementation 'com.github.javafaker:javafaker:1.0.2'


    // Acceptance Test Dependencies
    testAcceptanceImplementation 'org.awaitility:awaitility:4.2.0'
    testAcceptanceImplementation 'org.springframework.boot:spring-boot-starter-test'
    testAcceptanceImplementation 'io.projectreactor:reactor-test'
    testAcceptanceImplementation 'org.springframework.security:spring-security-rsocket'
    testAcceptanceImplementation 'org.springframework.boot:spring-boot-starter-rsocket'
    testAcceptanceImplementation testFixtures(project(':'))
    testAcceptanceImplementation 'com.github.javafaker:javafaker:1.0.2'

    // Dependencies needed for Cucumber
    testAcceptanceImplementation(platform("org.junit:junit-bom:5.10.0"))
    testAcceptanceImplementation(platform("io.cucumber:cucumber-bom:7.13.0"))
    testAcceptanceImplementation("io.cucumber:cucumber-java")
    testAcceptanceImplementation("io.cucumber:cucumber-junit-platform-engine")
    testAcceptanceImplementation("org.junit.platform:junit-platform-suite")
    testAcceptanceImplementation("org.junit.jupiter:junit-jupiter")
    testAcceptanceImplementation("io.cucumber:cucumber-spring")


    // Lombok Dependencies
    compileOnly "org.projectlombok:lombok:1.18.30"
    annotationProcessor "org.projectlombok:lombok:1.18.30"
    testCompileOnly "org.projectlombok:lombok:1.18.30"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.30"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty("cucumber.junit-platform.naming-strategy", "long")
}

tasks.register("testUnit", Test) {
    useJUnitPlatform {
        includeTags("UnitTest")
    }

    filter {
        // prevents the Cucumber Suite from loading in and running Cucumber tests
        excludeTestsMatching("org.grouphq.groupsync.cucumber.*")
    }

    maxParallelForks = 4 // don"t run for tests that interact with the file system. Unit tests should be fine
}

processTestAcceptanceResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register("testIntegration", Test) {
    useJUnitPlatform {
        includeTags("IntegrationTest")
    }

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }

    filter {
        // prevents the Cucumber Suite from loading in and running Cucumber tests
        excludeTestsMatching("org.grouphq.groupsync.cucumber.*")
    }
}

tasks.register("testAcceptance", Test) {
    useJUnitPlatform {
        excludeTags("UnitTest")
        excludeTags("IntegrationTest")
    }

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }

    systemProperty("cucumber.junit-platform.naming-strategy", "long")
}